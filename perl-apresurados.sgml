<!DOCTYPE Article PUBLIC "-//OASIS//DTD DocBook V4.2//EN">
<article lang="es">

<articleinfo>
  <title>Perl para apresurados</title>
  <author><firstname>Juan Julián</firstname>
          <surname>Merelo Guervós</surname>
<email>jjmerelo@gmail.com</email>
</author>
<authorinitials>JJ</authorinitials>

<revhistory>
     <revision>
        <revnumber>1.0</revnumber>
        <date>Jul 2006</date>
        <revremark>Preparando la primera versión para el curso de
Extremadura</revremark>  
     </revision>
    
  </revhistory>
</articleinfo>

<sect1 id='sect.id'>
<title>¿Quién eres tú?</title>
<subtitle>
¿A quién va dirigido este tutorial <emphasis>para apresurados</emphasis>?
</subtitle>

<para>Eso mismo te estarás preguntando, que quién diablos eres, que a
qué dedicas el tiempo libre, todo eso. Así que te vamos a echar una
mano. Supongo que ya sabes programar, que el concepto de
<emphasis>variable</emphasis> no va para ti asociado a la nubosidad ni
el de <emphasis>bucle</emphasis> a la cabeza de Nellie Olleson. Puede
que conozcas el C, sólo para precavidos, o hables con lengua de
serpiente (<ulink url='http://www.python.org'>pitón</ulink>), o incluso que el símbolo mayor y menor van para tí
asociados de forma indisoluble a un <ulink url='http://www.php.org'>acrónimo capicúa</ulink>.</para>

<para>Vamos, que puede extrañarte las formas ignotas en las que un nuevo
lenguaje de programación repite cachos de código o mete valores en
variables o representa listas de datos, pero los conceptos en sí no
son nada nuevo para tí. A tí, pues, va dirigido este
mini-tutorial.</para>

<para>Supongo también que tienes prisa. Si no, no estarías leyendo
este tutorial para <emphasis>apresurados</emphasis>. Estarías leyendo
uno titulado, por ejemplo, <emphasis>Perl para los que tienen todo el
tiempo del mundo</emphasis>. Es decir, que es necesariamente breve,
con la idea de poder ser impartido (y espero que asimilado) en unas
dos horas. Igual no te da tiempo a teclear todos los ejemplos de
código, pero este ordenador que estás mirando tiene una cosa
maravillosa llamada "corta y pega" con la que sin duda estás
familiarizado, y que podrás usar para tu provecho y el de la
Humanidad. </para>

<para>Y quizás todavía no lo sabes, pero
<emphasis>necesitas</emphasis> saber Perl. Para vigilar ese fichero de
registro y crear alertas que te avisen de lo inesperado. Para ese CGI
terriblemente complicado. Para convertir una página web demasiado
compleja en algo que también es complejo, pero que puedes leer con tu
lector de cosas complejas favorito. Para hacer lo que siempre quisiste
hacer: escribir <ulink url='http://www.perlmonks.org/index.pl?node=Perl%20Poetry'>poesía</ulink> en tu lenguaje de
programación favorito. En fin, donde quiera que haga
falta convertir cosas en otras cosas, ahí hace falta saber
Perl. </para>

<tip><para>Y con ello damos entrada a la primera
<emphasis>flamewar</emphasis> de este tutorial, que es donde tú, que
estás entre el público, dices aquello de <emphasis>Pues yo hago todo
eso, y más, en (Fortran|Postscript|Haskell)</emphasis>. Que vale, que
si. Los lenguajes de programación son universales. Se puede hacer de
todo con ellos. Y siempre es más fácil hacer algo en el lenguaje que
uno conoce mejor. Pero al menos tendrás más donde elegir, ¿no?</para></tip>

<para>Sobre todo, que no cunda el pánico. Y no te olvides de la <ulink
url='http://es.wikipedia.org/wiki/Dia_de_la_Toalla'>toalla</ulink>.</para>

</sect1>

<sect1><title>Todo listo para despegar</title>
<subtitle>Herramientas necesarias para programar en Perl</subtitle>

    <sidebar>
      <para>Si ya has usado algún lenguaje de scripting, lo más
probable es que te aburras como un bivalvo en esta sección. Así que
ahórrate un bostezo y pasa directamente a la <link linkend="sect.hola">siguiente</link>. O si
no <ulink url='http://www.cpan.org/src/latest.tar.gz'>descárgate los fuentes</ulink> y echas un ratillo
compilándolos en silencio, para no desmoralizarme a la parroquia.
</para>
    </sidebar>

<para>Lo primero que necesitas en tu lista de comprobación son las
cualidades de todo programador en Perl: la pereza, el orgullo y la
curiosidad. No te preocupes si no tienes ninguna de ellas, las irás
adquiriendo con el tiempo. Sobre todo la pereza. Y una cierta
habilidad de entender lenguas muertas como el caldeo y el
dálmata. </para>

<para>Segundo, necesitas amar a los camélidos. El Perl no es como esos
otros lenguajes que incitan a la avaricia a través de la adoración de
las <ulink url='http://www.ruby-lang.org'>piedras preciosas</ulink>, o
a la hiperactividad por ingestión de <ulink
url='http://www.java.com'>bebidas excitantes</ulink>. Los camellos son
buenos. Los camellos son útiles. Llevan cosas encima. Tienen
joroba. Amemos a los camélidos (las <ulink
url='http://es.wikipedia.org/wiki/llama'>llamas también son
camélidos</ulink>).</para>

<para>No menos importante es tener un ordenador con sistema
operativo. Incluso <ulink url='http://www.windows.com'>sin
él</ulink>. Ejecuta lo siguiente para saber si lo tienes:
<userinput>perl -v</userinput>
a lo que el ordenador debidamente contestará algo así:<figure>
	<title>Contestación de un ordenador educado a <userinput>perl -v</userinput></title>
	<screen><computeroutput>
This is perl, v5.8.7 built for i486-linux-gnu-thread-multi
(with 1 registered patch, see perl -V for more detail)

Copyright 1987-2005, Larry Wall

Perl may be copied only under the terms of either the Artistic License or the
GNU General Public License, which may be found in the Perl 5 source kit.

Complete documentation for Perl, including FAQ lists, should be found on
this system using `man perl' or `perldoc perl'.  If you have access to the
Internet, point your browser at http://www.perl.org/, the Perl Home Page.

</computeroutput></screen>
	
      </figure>

si es que está instalado. Si no lo está, es poco probable que conteste
eso. Incluso imposible. Dirá algo así como
<computeroutput>bash: perl: command not found</computeroutput>
e incluso pitará. El muy desagradable.</para>

<para>No hay que dejarse descorazonar por tal
eventualidad. Encomendándonos al <emphasis>Gran Camélido</emphasis>,
y sin necesidad de ver una vez más Ishtar, diremos en voz alta
"Abracadabra" mientras que escribimos
<userinput>sudo yum install perl</userinput>
o bien
<userinput>sudo apt-get install perl</userinput>
Si es que están en un linux no-debianita (en el primer caso) o en uno
debianita (en el segundo). Habrá gente que incluso lo haga sin necesidad de bajarse del
ratón. Pero los apresurados no usan el ratón salvo que sea
estrictamente necesario. Que no es el caso. En otros sistemas
operativos, lo mejor es ir a <ulink url='http://www.perl.com'>Perl.com
(si es que no has ido todavía)</ulink> y te bajes la versión
compilada. </para>

<para>También puedes compilarlo tú. Pero no creo que lo hagas, porque
eres un apresurado, y la compilación no está hecha para los
apresurados (si eres usuario de <ulink
url='http://www.gentoo.org'>Gentoo</ulink>, es el momento de abandonar
este tutorial).</para>

<para>Lo que tienes o has instalado es un intérprete de Perl. Perl es
generalmente un lenguaje interpretado, con lo que no hace falta ningún
encantamiento intermedio para pasar de un programa escrito en Perl a
su ejecución. Si te hará falta un editor. No <emphasis>un</emphasis>
editor. <emphasis>El</emphasis> editor.</para>
<tip>
<para>Los que apoyen al ínclito <productname>(x)emacs</productname> de
este lado del <emphasis>flamewar</emphasis>, los que se queden con el
sólido pero escuálido <productname>vi(m)</productname>, de este otro
lado. Los que estén con <productname>kate</productname>,
<productname>jot</productname>, o incluso el
<productname>kwrite</productname>, que elijan armas y padrinos y que
pidan hora.</para></tip>

<para>Vuelvo contigo entre el fragor de la batalla hablarte de otras
opciones. No es que haya muchas, pero hay alguna. Por ejemplo, puedes
usar el conocido entorno <ulink url='http://eclipse.org'>Eclipse</ulink> con el plugin
<ulink url='http://e-p-i-c.sourceforge.net'>EPIC</ulink> para
desarrollar proyectos, como se muestra en la figura siguiente.

<figure>
	<title>Iniciando un proyecto en Perl con EPIC/Eclipse</title>
	<screenshot>
	  <graphic fileref="img/e-p-i-c.png" scale="33" >
	</screenshot>
      </figure>
 </para>

<para>Otros entornos de desarrollo, como PerlIDE o Komodo, o bien no
siempre funcionan o bien son de pago. Si consigues que te lo compren,
suertudo de ti. Si no, apoya proyectos de software libre. Suficientes
personas han estado desarrollando sobre esos entornos durante el
suficiente tiempo como para que presenten la sana apariencia que se
muestra en la figura de abajo.
<figure>
	<title>Editando un programilla con gvim</title>
	<screenshot>
	  <graphic fileref="img/gvim-perl.png" scale="50" >
	</screenshot>
      </figure> 
</para>

    <para>Un editor decente tiene que tener colorines. Y también
cerrar paréntesis. Ninguno va a evitar que cometas errores, pero va a
hacértelo lo más complicado posible.</para>

    <important>
      
      <formalpara>
	<title>Ejercicios</title>
	<para>¿Tienes un intérprete de Perl instalado en tu sistema?
¿Tienes un editor (chulo, si es posible) para editar programas en
Perl? Si la respuesta a alguno de ellos es <emphasis>no</emphasis>, ¿a
qué esperas para tenerlos? Venga, te espero.</para>
      </formalpara>
    </important>

</sect1>

<sect1 id='sect.hola'><title> Comenzando una nueva carrera</title>
<subtitle>Primer programa en Perl: el clásico <emphasis>Hola
Mundo</emphasis></subtitle>
<para>Si has llegado hasta aquí, supongo que se te llevarán todos los
diablos, porque con la hora que es, las camas están sin hacer y lo que
s dice picar código, todavía no has picado nada. Y eso está bien: hay
que convertir esa rabia en energía creativa, y aprovechando que uno de
los diablos que se te llevan es cojuelo, escribir el siguiente
fragmento de literatura:</para>
<programlistingco id='prog.hola'>
<areaspec>
	<area id="hola.shebang" coords='1' >
	<area id="hola.print" coords='2' >
	<area id="hola.sn" coords='3' >
</areaspec>
    <programlisting linenumbering="numbered">
<emphasis>#!/usr/bin/perl</emphasis>
<function>print</function> "Daban en Madrid, por los fines de julio, las once de la noche en punto..."; 
<function>print</function> "\n"; 

</programlisting>
<calloutlist>
	<callout arearefs="hola.shebang"><para>Tratándose de diablos,
	lo mejor es usar los conjuros lo antes posible.  En esta
	línea, clásica de los lenguajes interpretados y denominada
	shebang se escribe el camino completo donde se halla el
	intérprete del lenguaje en cuestión. Si está en otro sitio,
	pues habrá que poner otro camino. Por ejemplo, podría ser
	<command>#!/usr/local/bin/perl</command> o bien<command>
	#!/usr/bin/perl6.0.por.fin</command>. O
	<command>#!perl</command> y que se busque la vida. Si se
	trabaja
(es un decir) en Windows, esa línea no es necesaria, pero es convenientepara que el programa sea compatible con otros sistemas operativos. Cuando un Unix/GNU/Linux
decente y trabajador encuentra esa línea, carga ese programa y le pasa el resto del fichero para que lo interprete.</para>
	</callout>

	<callout arearefs="hola.print">
	  <para>Aquí se imprime, con el <emphasis>nihil
obstat</emphasis> obtenido previamente. Obsérvense las comillas y el
punto y coma. Las órdenes en Perl acaban con un punto y coma, para que quede bien claro dónde acaban y
se puedan meter varias sentencias en una sola línea, con el objetivo
de crear programas innecesariamente ofuscados. Lo que no se puede
hacer en <emphasis>esos otros lenguajes</emphasis>. El
<function>print</function> es herencia de aquellos primeros tiempos de
los ordenadores, cuando el único periférico de salida era un convento
de monjes trapenses dedicados a la sana tarea de copiar textos (y que
se quedaron sin trabajo cuando el señor Hewlett se unió al señor Packard y crearon la impresora). En aquella época,
la salida de un programa venía encuadernada en piel de cabrito y con todas las primeras letras de
párrafo bellamente miniadas. Ah, tiempos aquellos, de los que sólo nos queda el nombre de una
orden.
 </para>
	</callout>
	<callout arearefs="hola.sn">
	  <para>Y aquí pasamos a la línea siguiente. Borrón y cuenta
nueva. Se acabó lo que se daba. Si ya conoces
algún lenguaje de programación, que se supone que lo conoces, pillín, porque te lo he preguntado en
la <link linkend='sect.id'>primera sección</link>, no hace falta que te explique que
<constant>\n</constant> es un <emphasis>retorno de carro</emphasis>, ¿verdad?<footnote>
	      <para>Lo que es recuerdo también de aquellos mismos tiempos en que <constant>STDOUT</constant> era un convento, en el que
para seguir en la página siguiente tenían que esperar que retornara el carro que les traía las pieles de
becerro curtidas en las que escribían lo que el programador les ordenaba.
</para>
	    </footnote>
</para>
	</callout>
      </calloutlist>
    </programlistingco>

<para>Desde un editor que cambie el color (y los tipos de letra) de
acuerdo con la sintaxis del programa que se está editando tal como el
<filename>emacs</filename>, el resultado debería ser algo similar al
que aparece en la <link linkend='fig.hola.emacs'>captura
siguiente</link>
</para>
    <figure id='fig.hola.emacs'>
      <title>Editando hola.pl en emacs</title>
	<screenshot>
	  <graphic fileref="img/hola_pl_emacs.png" scale="50" >
	</screenshot>
    </figure>

    <warning>
      <para>El usar este tipo de texto, que incluye caracteres con
acento, es bastante intencionado. En algunos editores puede que
aparezcan caracteres extraños; habrá que cambiar la
<emphasis>codificación</emphasis> para que entienda el conjunto de
caracteres <constant>iso-8858-1</constant> o
<constant>latin1</constant>. </para>
    </warning>


<important>
      
      <formalpara>
	<title>Ejercicios</title>
	<para>Elegir un editor no es un tema baladí, porque te
acompañará en tu vida como desarrollador. Prueba diferentes editores
disponibles en tu sistema mirando sobre todo a las posibilidades que
tienen de adaptación a diferentes cometidos (comprobar la sintaxis y
depurar, por ejemplo). Nadie te ata a un editor de por vida, pero
cuanto antes lo elijas, antes empezarás a ser productivo. Así que ya
estás empezando a usar el (x)emacs. </para>
      </formalpara>
    </important>
</sect1>

<sect1>
<title>Viéndole las tripas al producto</title>
<subtitle>Ejecutando el programa paso a paso</subtitle>
<para>Mucho editar, mucho editar, pero de ejecutar programas nada de
nada. Lo que hemos editado no deja de ser un fichero de texto, así que
para ejecutarlo tendremos que llevar a cabo algún encantamiento para
meterlo en el corredor de la ejecución.</para>

<para>Tampoco hace falta. Lo más universal es irse a un intérprete de
comandos, colocarse en el directorio donde hayamos salvado el fichero,
y escribir <userinput>perl hola.pl</userinput>. Pero ya que estás
puesta, puedes hacer algo más: escribir <userinput>chmod +x
hola.pl</userinput>, lo que convertirá al fichero en ejecutable, es
decir, en algo que podemos correr simplemente tecleando su nombre, de
esta forma:
<screen><userinput>jmerelo@vega:~/txt/tutoriales/perl-apresurados/code$./hola.pl</userinput>
<computeroutput>Daban en Madrid, por los fines de julio, las once de la noche en punto, hora menguada...
</computeroutput>
</screen>
Pero el encantamiento este actúa también a otros niveles, pudiendo
ejecutar el programa directamente desde esos inventos del averno
llamados <emphasis>entornos de ventanas</emphasis>, como se muestra en
la <link linkend='fig.ejecutando'>figura siguiente</link>. 

<figure id='fig.ejecutando'>
      <title>Ejecutando un programa en Perl desde Gnome</title>
	<screenshot>
	  <graphic fileref="img/ejecutando.png" scale="50" >
	</screenshot>
    </figure>

Como el Nautilus, el manejador de ficheros de Gnome es muy listo, se
dice a si mismo (pero bajito): <command>Pardiez, este fichero es
ejecutable. ¿Qué puedo hacer con él? ¿Lo ejecuto? ¿Lo abro sin
ejecutarlo? La duda me carcome. Se lo preguntaré al honorable
usuario</command>. El menú contextual (con el botón derecho del ratón)
nos ofrecerá opciones similares. El problema es que si lo ejecutamos
será visto y no visto.
</para>

<para>Vamos a dejar entonces que el programa se quede clavado hasta
nueva orden, con una pequeña modificación, que aparece en el siguiente
listado</para>
    <programlisting linenumbering="numbered" id='hola-y-duerme'>
<emphasis>#!/usr/bin/perl</emphasis>
<function>print</function> "A estas horas, el Estudiante, no creyendo su buen suceso y
deshollinando con el vestido y los ojos el zaquizamí...\n"; 
<function>sleep</function> <constant>10</constant>;
</programlisting>
<para>Que, con un poco de suerte, nos permitirá capturar una pantalla
como la siguiente:
<figure id='fig.ejecutando.terminal'>
	<title>Terminal con el resultado de ejecutar el programa
<filename>hola-y-duerme.pl</filename></title>
	<screenshot>
	  <graphic fileref="img/ejecutando-terminal.png" scale="60" >
	</screenshot>
    </figure>
En otros sistemas operativos, cambiará el icono y la apariencia del
terminal donde está el resultado, pero por lo demás, el resultado será
el mismo. La única diferencia con el <link linkend='prog.hola'>primer
programa</link> es la última línea, que le indica al programa que se
quede quieto parao (dormido, de hecho) durante 10 segundos. Y que diga
<emphasis>cheeeeeese</emphasis> (solo en ordenadores con interfaz
gestual y/o emocional y/o audiomotriz/parlanchín). </para>

<para>Pero incluso así, puede que sea demasiado rápido para apreciar
la sutileza de cada una de las órdenes, y haya que ejecutarlo paso a
paso. Más adelante tendrás que <emphasis>depurar</emphasis> tus
programas, porque cometerás errores, si, errores y tendrás que
corregirlos sobre la marcha. De la forma más inteligente, además. Pero
no hay que preocuparse, porque Perl tiene un depurador
integrado. Ejecuta el programa de esta forma:</para>
<screen id='ej.depurador.1'><userinput>jmerelo@vega:~/txt/tutoriales/perl-apresurados/code$
perl -d hola-y-duerme.pl</userinput>
<computeroutput>Loading DB routines from perl5db.pl version 1.28
Editor support available.

Enter h or `h h' for help, or `man perldebug' for more help.

main::(hola-y-duerme.pl:3):     print "A estas horas, el Estudiante, no creyendo su buen suceso y
main::(hola-y-duerme.pl:4):     deshollinando con el vestido y los ojos el zaquizamí..\n"; 
  DB<1> 
</computeroutput></screen>
<para>La opción <command>-d</command> del intérprete te introduce en
el depurador, así, sin más prolegómenos. A partir de esa línea de
comandos, puedes evaluar las expresiones de Perl que quieras, y, por
supuesto, depurar el programa, ejecutándolo paso a paso, mirando
variables, y todo ese protocolo inherente al mester de la
programación. Para empezar, vamos a ejecutarlo pasito a pasito.
<screen id='deb.iniciando'><userinput>DB<1> R</userinput>
<computeroutput>Warning: some settings and command-line options may be lost!

Loading DB routines from perl5db.pl version 1.28
Editor support available.

Enter h or `h h' for help, or `man perldebug' for more help.

main::(hola-y-duerme.pl:3):     print "A estas horas, el Estudiante, no creyendo su buen suceso y
main::(hola-y-duerme.pl:4):     deshollinando con el vestido y los ojos el zaquizamí..\n"; 
</computeroutput></screen>
, lo que empieza a hacerse ya un poco repetitivo. La orden
<command>R</command> comienza a ejecutar el programa. En realidad,
<link linkend='ej.depurador.1'>antes </link> lo único que habíamos
hecho es indicarle (educadamente) al depurador el programa que íbamos
a depurar; ahora es cuando lo estamos ejecutando en serio. Bueno,
todavía no, porque en este punto todavía no hemos ejecutado ni
siquiera la primera línea. La salida del depurador nos indica
<<computeroutput>main::(hola-y-duerme.pl:3):</computeroutput> la
siguiente línea del programa (<constant>3</constant>) que vamos a
ejecutar (y la 4 de camino, que para eso la orden ocupa dos líneas). 
<screenco>
	<areaspec>
	  <area coords="1" id="scr.deb.n">
	  <area coords="2" id="scr.deb.salida">
	  <area coords="4" id="scr.deb.sig">
	</areaspec>
	<screen>
<userinput>  DB<0> n</userinput>
<computeroutput>A estas horas, el Estudiante, no creyendo su buen suceso y
deshollinando con el vestido y los ojos el zaquizamí..
main::(hola-y-duerme.pl:5):     sleep 10;
</computeroutput>
</screen>
<calloutlist>
	<callout arearefs="scr.deb.n">
	  <para><command>n</command>, de <emphasis>next</emphasis>,
siguiente, ejecutal la línea siguiente, es decir, justamente la que
aparece al final de <link linkend='deb.iniciando'>el ejemplo anterior</link></para>
	</callout>
	<callout arearefs="scr.deb.salida">
	  <para>Ésta es la salida de esa línea en particular; lo que
hace es escribir lo que se encuentra entre las comillas.</para>
	</callout>
	<callout arearefs="scr.deb.sig">
	  <para>Y muestra la
línea siguiente a ejecutar.</para>
	</callout>
      </calloutlist>
      </screenco>
</para>

<para>Como persona precavida vale por dos diablillos, no es mala idea
tener siempre el depurador abierto para ir probando cosas. Te ahorrará
más de una vuelta al editor a reescribir lo que ya está
escrito. Además, es muy fácil. Si has elegido <productname>Un Buen
Editor</productname> (o sea, el XEmacs), y te ha reconocido el
programa como un fichero Perl, tendrás una opción del menú llamada
<command>perl</command>; desplegando ese menú, te aparecerá la opción
<command>debugger</command>, eligiéndola te dará un resultado similar
al que se muestra en la siguiente captura de pantalla:
<figure id='fig.depurando.xemacs'>
	<title>Depurando un programa en el mismo editor XEmacs. La
flecha está situada sobre la siguiente línea a ejecutar.</title>
	<screenshot>
	  <graphic fileref="img/debugging.png" scale="60" >
	</screenshot>
    </figure>
Desde este depurador se trabaja de la misma forma que en la versión de
la línea de comandos, pero se pueden colocar puntos de ruptura usando
el ratón, por ejemplo, y puedes ver las líneas que se están ejecutando
en su contexto. </para>

<para>Con esto, ya estamos listos para abordar empresas más elevadas,
y que nos llevarán mucho más lejos.</para>
<important>
      
      <formalpara>
	<title>Ejercicios</title>
	<para>Familiarizarse con el depurador, creando un programa con
las dos o tres cosas que se conocen, y viendo las diferentes órdenes;
por ejemplo, cómo ejecutar un programa sin parar, o hasta una línea
determinada, y cómo hacer que la ejecución se pare en una línea
determinada. Recuerda, <command>h</command> es tu amiga. </para>
      </formalpara>
    </important>
</sect1>

<sect1 id='sect.cpan'>
    <title>Usando la sabiduría colectiva</title>
    <subtitle>Cómo descargar módulos de Perl, y como usar alguno de
ellos. Algunas funciones útiles. </subtitle>

<para>Escribir está bien. Hay dos o tres personas que incluso se ganan
la vida con ello<footnote><para>Los monjes trapenses de la congregación
	periférica de E/S ya no, desgraciadamente, y se dedican a la
	elaboración de un delicioso licor de
	alcachofa</para></footnote>. Pero hace falta hacer algo más. Copiar a
Faulkner, por ejemplo. Pero no sólo copiarlo. Ser más Faulkner que
Faulkner. O mezclar Faulkner con, pongamos por caso, David Sedaris. O
quizás Hemingway con Sedaris. Y llegado a este punto, te voy a contar
un secreto. No hace falta que programes absolutamente nada. Ya hay
gente que ha hecho lo que tú piensas programar en este preciso
instante. De hecho, un vietnamita y un chavalote de Mondoñedo que
acaba de terminar un módulo de FP segundo grado. Pero ambos dos son
buenas personas, y legan su trabajo a la humanidad toda (inclusive
tú). Si hay una sola cosa que haga al Perl superior a otros lenguajes
de programación, son esas cosas que ha hecho la gente, empaquetado y
colocado en un sitio común, llamado <ulink
url='http://search.cpan.org'>CPAN</ulink>. CPAN significa, como
probablemente ya habías adivinado, <emphasis>comprehensive Perl
Archive Network</emphasis>, y es un sitio donde hay cienes, qué digo
cienes, millardos de módulos que hacen todas esas cosas que se te
hayan podido ocurrir, y otras cuantas que, ni harto de vino, se te
podrían haber ocurrido. Pero hay que saber usarlo, claro.</para>

    <note>
      <para>Si has tenido que pedirle a alguien que te instale el
Perl, posiblemente sea el momento de que tengas a mano otra vez su
teléfono o móvil, porque vas a volver a necesitarlo. No ahora. Más
tarde. Mientras tanto, aunque no sea el <ulink
url='http://www.sysadminday.com/'>día de apreciación del administrador
del sistema</ulink>, aprovecha para pensar en él con cariño. Antes
de que la falta de calor humano lo convierta en un <ulink
url='http://es.wikipedia.org/wiki/Bofh'>operador bastardo del
infierno</ulink>. Para instalar módulos de CPAN para que sean
accesibles para todo el mundo hace falta tener privilegios de
operador; sin embargo, puedes instalarlos sin problemas en tu propio
directorio (por ejemplo, en
<filename>/home/miusuario/lib/perl</filename>).</para>
    </note>

<para>En CPAN hay módulos para todo. En particular, para manejar
textos en diferentes idiomas. Por ejemplo, un módulo para dividir en
sílabas texto en castellano llamado <ulink
url='http://search.cpan.org/~marcos/Lingua-ES-Silabas-0.01/'>Lingua::ES::Silabas</ulink>.
Un módulo es simplemente una biblioteca de utilidades para un fin
determinado (o ninguno) escritas en Perl, o, al menos, empaquetadas
para que se pueda acceder a ellas desde un programa en Perl. Una
librería crea una serie de funciones a las que podemos acceder desde
nuestros programas. Pero antes hay que instalarla. Y antes todavía,
hay que ejecutar CPAN por primera vez:
<screen>
<userinput>jmerelo@vega:~$ sudo cpan</userinput>
<computeroutput>
cpan shell -- CPAN exploration and modules installation (v1.83)
ReadLine support enabled

cpan> 
</computeroutput>
</screen>
Si realmente es la primera vez que lo ejecutas, te preguntará una
serie de cosas. En la mayoría es razonable contestar la opción que te
ofrezcan por defecto, pero en un par de ellas si tienes que
elegir:<itemizedlist>
	<listitem>
	  <para>Si no tienes privilegios de superusuario, tendrás
	  que elegir un subdirectorio alternativo para colocar los
	  módulos instalados.</para>
	</listitem>
	<listitem>
	  <para>Es conveniente usar los repositorios más accesibles
desde tu país, y por orden de frecuencia de actualización, para tener
garantía de frescura de los módulos. Por ejemplo, dos buenas opciones
pueden ser  http://debianitas.net/CPAN/ y
http://cpan.imasd.elmundo.es/; aunque los otros repositorios con la
extensión <command>.es</command> también suelen funcionar
relativamente bien. 
 </para>
	</listitem>
      </itemizedlist>

</para>

<para>Una vez configurado todo, ya se puede instalar el módulo
susodicho. Lo puedes hacer directamente desde la línea de comandos con
<screen>
<userinput>install Lingua::ES::Silabas</userinput>
<computeroutput>CPAN: Storable loaded ok
LWP not available
Fetching with Net::FTP:
  ftp://ftp.rediris.es/mirror/CPAN/authors/01mailrc.txt.gz
Going to read /home/jmerelo/.cpan5.9.3/sources/authors/01mailrc.txt.gz
CPAN: Compress::Zlib loaded ok
LWP not available
[...más cosas...]
Fetching with Net::FTP:
  ftp://ftp.rediris.es/mirror/CPAN/authors/id/M/MA/MARCOS/CHECKSUMS

  CPAN: Module::Signature security checks disabled because Module::Signature
  not installed.  Please consider installing the Module::Signature module.  You may also need to be able to connect over the Internet to the public
  keyservers like pgp.mit.edu (port 11371).

Checksum for /home/jmerelo/.cpan5.9.3/sources/authors/id/M/MA/MARCOS/Lingua-ES-Silabas-0.01.tar.gz ok
Scanning cache /home/jmerelo/.cpan5.9.3/build for sizes
Lingua-ES-Silabas-0.01/
Lingua-ES-Silabas-0.01/Silabas.pm
Lingua-ES-Silabas-0.01/README
Lingua-ES-Silabas-0.01/Makefile.PL
Lingua-ES-Silabas-0.01/Changes
Lingua-ES-Silabas-0.01/MANIFEST
Lingua-ES-Silabas-0.01/test.pl

  CPAN.pm: Going to build M/MA/MARCOS/Lingua-ES-Silabas-0.01.tar.gz

Checking if your kit is complete...
Looks good
Writing Makefile for Lingua::ES::Silabas
cp Silabas.pm blib/lib/Lingua/ES/Silabas.pm
Manifying blib/man3/Lingua::ES::Silabas.3
  /usr/bin/make  -- OK
Running make test
PERL_DL_NONLAZY=1 /usr/local/bin/perl5.9.3 "-Iblib/lib" "-Iblib/arch" test.pl
1..9
# Running under perl version 5.009003 for linux
# Current time local: Mon Jul 10 23:34:36 2006
# Current time GMT:   Mon Jul 10 21:34:36 2006
# Using Test.pm version 1.25
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
  /usr/bin/make test -- OK
Running make install
Installing /usr/local/lib/perl5/site_perl/5.9.3/Lingua/ES/Silabas.pm
Installing /usr/local/share/man/man3/Lingua::ES::Silabas.3
Writing /usr/local/lib/perl5/site_perl/5.9.3/i686-linux-thread-multi-ld/auto/Lingua/ES/Silabas/.packlist
Appending installation info to /usr/local/lib/perl5/5.9.3/i686-linux-thread-multi-ld/perllocal.pod
  sudo make install  -- OK
</computeroutput></screen>
que, efectivamente, descarga el módulo del repositorio espejo de CPAN
más cercano (en este caso ftp.rediris.es), lo "compila", hace una
serie de tests (sin los cuales no se instalaría siquiera), y
efectivamente lo instala para que esté disponible para todos los
programas que quieran usarlo (que no creo que sean muchos, pero alguno
puede caer).</para>

<para>Vamos a ver ahora como se usa ese pozo de sabiduría.</para>
    <programlistingco>
      <areaspec>
	<!-- one of (AREASET AREA) -->
	<area coords="1" id="area.cpan.use">
	<area coords="3" id="area.cpan.join">
	<area coords="4" id="area.cpan.texto">
      </areaspec>
      <programlisting>
<constant>use</constant> <function>Lingua::ES</function>::<function>Silabas</function>;

<function>print</function> <function>join</function>(" / ", silabas(<function>join</function>("", <function>split</function>(/[<literal>\s,</literal>]/,&lt;&lt;<constant>EOC</constant>)))), "\n";
Yo soy, señor Licenciado, que estoy en esta redoma, adonde me tiene
preso ese astrólogo que vive ahí abajo, porque también tiene su punta
de la mágica negra, y es mi alcaide dos años habrá.
<constant>EOC</constant>
</programlisting>
      <calloutlist>
	<callout arearefs="area.cpan.use">
	<para>Para empezar, que no cunda el pánico. Si estamos a Perl,
estamos a Perl, y hay que ver cómo Perl hace las cosas de forma
diferente a cualquier otro lenguaje de programación. Dicen que Perl no
es amistoso para el usuario, pero lo cierto es que Perl
<emphasis>elige a sus amigos</emphasis>. Así que es cuestión de ver a
Perl como a un Calimero cualesquiera, y entender su peculiaridades,
como las que aparecen aquí. Bueno, no aquí, más abajo. Por lo pronto,
sólo que no cunda el pánico.</para>
	  <para>En esta línea lo único que se hace es cargar la
librería que antes, debidamente, hemos instalado. Y quizás merezca la
pena señalar un poco la estructura del nombre. Todos los módulos en
CPAN están organizados en espacios de nombres, para hacer más fácil su
búsqueda y evitar colisiones de funcionalidad (y de nombre
también). En este caso, el espacio de nombre es el
<filename>Lingua</filename>, que incluye muchos más módulos cada vez
más esotéricos. Pero este espacio está bien organizado, porque luego
vienen un par de caracteres que indican a qué lengua se aplica el
módulo susodicho; en este caso, <filename>ES</filename>. Finalmente,
el último apartado es el realmente específico.</para>

	  <note>
<para>En cada sistema de ficheros específico, el nombre también indica
en el directorio en el que estará almacenado, dentro de los
directorios donde se suelen almacenar los módulos.</para></note>
	</callout>
	<callout arearefs="area.cpan.join">
	  <para>Aquí viene un embutido de diferentes órdenes en Perl,
que, como suele ser habitual, es mejor leerlas de derecha a
izquierda. O del punto y coma para el otro lado. Porque no me voy a
poner a explicar la derecha de quién quiero decir. </para>
	</callout>
	<callout arearefs="area.cpan.texto">
	  <para>Lo del texto</para>
	</callout>
      </calloutlist>
    </programlistingco>
</sect1>


</article>
